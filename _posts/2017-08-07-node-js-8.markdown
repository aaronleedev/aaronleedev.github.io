---
layout: post
title:  node.js express 모듈
date:   2017-08-07 16:05:00
author: Aaron Lee
categories: node.js
tags:	node.js book study
cover:  "/assets/node_js_book_01.png"
---

express 모듈은 http 모듈에 여러 기능을 추가해 쉽게 사용할 수 있게 만든 모듈이다.

## express 모듈 설치
```
$ npm install express
```

---

# 기본 서버
express 모듈로 서버를 생성 및 실행 방법은 아래와 같다.
```
var http = require('http');
var express = require('express');

// 서버 생성
var app = express();

// request 이벤트 리스너 설정
app.use(function (request, response) {
   response.writeHead(200, { 'Content': 'text/html' });
   response.end('<h1>Hello express</h1>'); 
});

// 서버 실행
http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

---

# 기본 응답 메서드 (Response)
### *response 객체 메서드*
- response.send( ) : 매개변수의 자료형에 따라 적절한 형태로 응답
- response.json( ) : JSON 형태로 응답
- response.jsonp( ) : JSONP 형태로 응답
- response.redirect( ) : 웹 페이지 경로를 강제로 이동

## response.send( )
### *send( ) 메서드 매개변수*
- 문자열 : HTML
- 배열 : JSON
- 객체 : JSON

```
var http = require('http');
var express = require('express');

var app = express();

app.use(function (request, response) {
    var output = [];
    for(var i = 0; i < 3; i++) {
        output.push({
            count: i,
            name: 'name - ' + i
        });
    }
    
    // 매개변수로 배열을 전달
    response.send(output);
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

> NOTE_ [JSON Formatter](https://aaronleedev.github.io/development/tool/2017/08/11/development-tool-json-formatter.html)  
> 크롬에서 JSON 형식과 JSONP 형식을 보기 쉽게 보여주는 크롬 확장 프로그램

```
var http = require('http');
var express = require('express');

var app = express();

app.use(function (request, response) {
    // 첫번째 매개변수로 Status Code, 두번째 매개변수로 HTML 응답 데이터 전달
    response.send(404, '<h1>ERROR</h1>');
    
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

---

# 기본 요청 메서드 (Request)
### *request 객체 메서드*
- header( ) : 요청 헤더의 속성을 지정 또는 추출
- accepts( ) : 요청 헤더의 Accept 속성을 확인
- param( ) : 요청 매개변수를 추출
- is( ) : 요청 헤더의 Content-Type 속성을 확인

## 요청 헤더의 속성 추출
header() 메서드를 사용하여 요청 헤더의 속성을 추출할 수 있다.
```
var http = require('http');
var express = require('express');

var app = express();

app.use(function (request, response) {
    // User-Agent 속성 추출
    var agent = request.header('User-Agent');
    
    console.log(request.headers);
    console.log(agent);
    
    response.send(200);
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```
```
Command: node   "D:/node.js code/example/8/8-3.js" 
Server Running at http://127.0.0.1:52273
{ host: '127.0.0.1:52273',
  connection: 'keep-alive',
  'cache-control': 'max-age=0',
  'upgrade-insecure-requests': '1',
  'user-agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36',
  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding': 'gzip, deflate, br',
  'accept-language': 'ko-KR,ko;q=0.8,en-US;q=0.6,en;q=0.4,ja;q=0.2' }
Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36
```

> NOTE_ User-Agent 속성을 이용 브라우저 구분  
> ```
> var http = require('http');
> var express = require('express');
> 
> var app = express();
> 
> app.use(function (request, response) {
>     // User-Agent 속성 추출
>     var agent = request.header('User-Agent');
>     
>     // 브라우저를 구분
>     if(agent.toLowerCase().match(/chrome/)) {
>         response.send('<h1>Hello Chrome ... !</h1>');
>     } else {
>         response.send('<h1>Hello Express ... !</h1>');
>     }
> });
> 
> http.createServer(app).listen(52273, function () {
>     console.log('Server Running at http://127.0.0.1:52273');
> });
> ```  

## 요청 매개변수 추출
param() 메서드를 이용하여 요청 매개변수를 추출할 수 있다.
```
var http = require('http');
var express = require('express');

var app = express();

app.use(function (request, response) {
    // 요청 매개변수 추출
    var name = request.param('name');
    var region = request.param('region');
    
    response.send('<h1>' + name + ' - ' + region + '</h1>');
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

![_config.yml]({{ site.baseurl }}/images/2017-08-07-node-js-8-01.png)

---

# 미들웨어 개요
use() 메서드는 여러 번 사용할 수 있다. 이때 use() 메서드의 3번재 매개변수에 다음에 호출할 함수를 입력한다.
```
var http = require('http');
var express = require('express');

var app = express();

app.use(function (request, response, next) {
    console.log('첫번째 미들웨어');
    next();
});

app.use(function (request, response, next) {
    console.log('두번째 미들웨어');
    next();
});

app.use(function (request, response, next) {
    console.log('세번째 미들웨어');
    
    response.send('<h1>Express Basic</h1>');
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```
```
Command: node   "D:/node.js code/example/8/8-4.js" 
Server Running at http://127.0.0.1:52273
첫번째 미들웨어
두번째 미들웨어
세번째 미들웨어
```

![_config.yml]({{ site.baseurl }}/images/2017-08-07-node-js-8-02.png)

use() 메서드의 매개변수에 입력하는 함수를 미들웨어(middleware)라고 부른다.
```
var http = require('http');
var express = require('express');

var app = express();

app.use(function (request, response, next) {
    request.number = 52;
    response.number = 273;
    next();
});

app.use(function (request, response, next) {
    response.send('<h1>' + request.number + ' : ' + response.number + '</h1>');
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

![_config.yml]({{ site.baseurl }}/images/2017-08-07-node-js-8-03.png)

미들웨어를 사용하면 특정한 일을 수행하는 모듈을 분리해서 만들 수 있다. express 모듈에서는 다양한 미들웨어를 제공한다.

### *express 모듈에서 제공하는 미들웨어*
- logger : 로그 정보 출력
- csrf : CSRF 보안 수행
- basicAuth : 기본적인 인증 수행
- bodyParser : POST 요청 매개변수 추출
- cookieParser : 쿠키 분해
- session : 세션 처리 수행
- methodOverride : 다양한 요청 방식을 수행할 수 있게한다
- responseTime 응답 시간 계산
- router : 페이지 라우트 수행
- staticCache : static 미들웨어를 위한 메모리 캐시 층을 생성
- static : 특정 폴더를 서버의 루트 폴더에 올린다
- directory : 서버의 디렉토리 구조를 보여준다
- vhost : 가상 호스트 설정
- favicon : 파비콘 생성
- limit : POST 요청의 데이터를 제한
- errorHandler : 예외 처리 수행  

> NOTE_ express 4.x 버전 이후 기본 제공 미들웨어 모두 제거  
> express 4.x 버전으로 업그레이드 되면서 기존 기본으로 제공되던 미들웨어가 모두 제거 되었다. 기존 미들웨어를 사용하기 위해서는 개발자가 직접 설치 후 추출해 사용해야 한다. 미들웨어 목록은 [express 홈페이지](http://expressjs.com/ko/guide/migrating-4.html)에서 확인 가능하다.

---

# logger 미들웨어 (-> morgan 미들웨어)
logger 미들웨어는 웹 요청이 들어왔을 때 로그를 출력하는 미들웨어이다. express 4.x 버전 이후 [morgan 미들웨어](https://github.com/expressjs/morgan)로 변경 되었으며, 직접 설치해 사용 해야한다. 
```
var http = require('http');
var express = require('express');

var app = express();
// morgan 미들웨어 추출
var morgan = require('morgan');

// morgan 미들웨어 설정
app.use(morgan());
app.use(function (request, response) {
    response.send('<h1>Express Basic</h1>');
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```
```
Command: node   "D:/node.js code/example/8/8-5.js" 
Server Running at http://127.0.0.1:52273
::ffff:127.0.0.1 - - [Sat, 12 Aug 2017 04:08:37 GMT] "GET / HTTP/1.1" 200 22 "-" "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36"
::ffff:127.0.0.1 - - [Sat, 12 Aug 2017 04:08:37 GMT] "GET /favicon.ico HTTP/1.1" 200 22 "http://127.0.0.1:52273/" "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36"
```

morgan() 메서드의 매개변수에 문자열을 입력해 출력 로그를 원하는 형태로 지장할 수 있다. 매개변수로 입력할 수 있는 문자열 토큰은 아래와 같다.
### *morgan 미들웨어 토큰*
- :req[header] : 요청 헤더 출력
- :res[header] : 응답 헤더 출력
- :http-version : HTTP 버전 출력
- :response-time : 응답 시간 출력
- :remote-addr : 원격 주소 출력
- :date : 요청 시간 출력
- :method : 요청 방식 출력
- :url : 요청 URL 출력
- :referrer : 이전 URL 출력
- :user-agent : 사용자 에이전트 출력
- :status : 상태 코드 출력

```
var http = require('http');
var express = require('express');

var app = express();
var morgan = require('morgan');

app.use(morgan(':method + :date'));
app.use(function (request, response) {
    response.send('<h1>Express Basic</h1>');
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```
```
Command: node   "D:/node.js code/example/8/8-5.js" 
Server Running at http://127.0.0.1:52273
GET + Sat, 12 Aug 2017 04:21:27 GMT
GET + Sat, 12 Aug 2017 04:21:27 GMT
```

직접 토큰을 입력할 수 있지만 기본 형식을 사용할 수도 있다.
### *morgan 미들웨어 기본 형식*
- combined : :remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"
- short : :remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms
- tiny : :method :url :status :res[content-length] - :response-time ms

```
var http = require('http');
var express = require('express');

var app = express();
var morgan = require('morgan');

app.use(morgan('short'));
app.use(function (request, response) {
    response.send('<h1>Express Basic</h1>');
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```
```
Command: node   "D:/node.js code/example/8/8-5.js" 
Server Running at http://127.0.0.1:52273
::ffff:127.0.0.1 - GET / HTTP/1.1 304 - - 5.000 ms
::ffff:127.0.0.1 - GET /favicon.ico HTTP/1.1 304 - - 0.565 ms
```

> NOTE_ 더 많은 morgan 미들웨어 기본 형식 [morgan 홈페이지](https://github.com/expressjs/morgan#predefined-formats)에서 확인 가능하다.

---

# static 미들웨어 (-> serve-static 미들웨어)
static 미들웨어는 웹 서버에서 손쉽게 파일을 제공하는 방법을 제공한다. express 4.x 버전 이후 [serve-static 미들웨어](https://github.com/expressjs/serve-static)로 변경 되었으며, 직접 설치해 사용 해야한다.

```
var http = require('http');
var express = require('express');

var app = express();
var morgan = require('morgan');
// serve-static 미들웨어 추출
var serveStatic = require('serve-static');

app.use(morgan());
// 전역 변수 __dirname을 사용하여 폴더 위치 지정
app.use(serveStatic(__dirname + '/public'));
app.use(function (request, response) {
    response.send('<img src="/test.jpg" width="100%" />');
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

---

# router 미들웨어
router 미들웨어는 페이지 라우팅(Page Routing)을 구현하는 미들웨어이다. 페이지 라우팅은 클라이언트 요청에 적절한 페이지를 제공하는 기술이다. express 4.x 버전 이후 app.route() 메소드와 모듈식 마운팅 가능한 express.Router 클래스가 추가 되었다.

```
var http = require('http');
var express = require('express');

var app = express();

// 기본 라우팅 방법
//app.get('/a', function (request, response) {
//    response.send('<a href="/b">Go to B</a>'); 
//});

// app.route() 메소드 사용하여 페이지 라우팅 방법
app.route('/a').get(function (request, response) {
    response.send('<a href="/b">Go to B</a>'); 
});

// express.Router 클래스 사용하여 모듈식 마운팅 가능한 페이지 라우팅 방법
var router = require('./customize.router');
app.use('', router);

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```
```
***********************
* customize.router.js *
***********************

// express.Router 클래스 사용하여 모듈식 마운팅 가능한 페이지 라우팅 방법
var express = require('express');
var router = express.Router();

router.use(function timeLog(request, response, next) {
    console.log('Time: ', Date.now());
    next();
});
router.get('/b', function (request, response) {
    response.send('<a href="/a">Go to A</a>');
});

module.exports = router;
```

> NOTE_ URL 경로 지정할 때 대소문자를 무시하는 것이 기본 설정이다.

### *router 객체 메서드*
- get( path, callback ) : GET 요청 발생시, 이벤트 리스너 지정
- post( path, callback ) : POST 요청 발생시, 이벤트 리스너 지정
- put( path, callback ) : PUT 요청 발생시, 이벤트 리스너 지정
- dell( path, callback ) : DELETE 요청 발생시, 이벤트 리스너 지정
- all( path, callback ) : 모든 요청이 발생시, 이벤트 리스너 지정

페이지 라우팅 할 때 토큰을 사용할 수 있다.
```
var http = require('http');
var express = require('express');

var app = express();

app.get('/page/:id', function (request, response) {
    var number = request.param('id');
    response.send('<h1>' + number + ' Page</h1>'); 
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

![_config.yml]({{ site.baseurl }}/images/2017-08-07-node-js-8-04.png)

> NOTE_ 전체 선택자  
> express 모듈의 router 미들웨어는 점체 선택자를 사용할 수 있다. 라우트 메서드를 사용한 순서대로 요청을 확인하므로 전체 선택자를 사용하는 라우트는 반드시 마지막에 위치해야 한다.
> ```
> ...
> ...
> var router = require('./customize.router');
> app.use('/', router);
> 
> app.get('/page/:id', function (request, response) {
>     var number = request.param('id');
>     response.send('<h1>' + number + ' Page</h1>'); 
> });
> 
> app.all('*', function (request, response) {
>     response.send(404, 'ERROR - Page Not Found');
> });
> 
> http.createServer(app).listen(52273, function () {
>     console.log('Server Running at http://127.0.0.1:52273');
> });
> ```

---

# cookie parser 미들웨어
cookie parser 미들웨어는 요청 쿠키를 추출하는 미들웨어이다. cookie parser 미들웨어를 사용하면 request 객체에 cookies 속성이 추가된다. express 4.x 버전 이후 [cookie-parser 미들웨어](https://github.com/expressjs/cookie-parser)을 직접 설치해 사용 해야한다.
```
var http = require('http');
var express = require('express');

var app = express();
var morgan = require('morgan');
var serveStatic = require('serve-static');
// cookie-parser 미들웨어 추출
var cookieParser = require('cookie-parser');

app.use(morgan());
app.use(serveStatic(__dirname + '/public'));
// cookie-parser 미들웨어 설정
app.use(cookieParser());

app.get('/getCookie', function (request, response) {
    // cookie 출력
    response.send(request.cookies); 
});
app.get('/setCookie', function (request, response) {
    // cookie 생성
    response.cookie('string', 'cookie');
    response.cookie('json', {
        name: 'cookie',
        property: 'delicious'
    });
    
    response.redirect('/getCookie'); 
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

![_config.yml]({{ site.baseurl }}/images/2017-08-07-node-js-8-04.png)

cookie() 메서드 세번째 매개변수에는 아래와 같이 옵션 객체를 입력할 수 있다.
```
response.cookie('string', 'cookie', {
    maxAge: 6000,
    secure: true
});
```

### *[cookie() 메서드 옵션 속성](https://github.com/expressjs/cookie-session#cookie-options)*
- httpOnly : 클라이언트의 쿠키 접근 권한 지정
- secure : secure 속성 지정
- expires : expires 속성 지정
- maxAge : 상대적으로 expires 속성 지정
- path : path 속성 지정

---

# body parser 미들웨어 (-> body-parser 미들웨어, Multer 미들웨어)
body parser 미들웨어는 POST 요청 데이터를 추출하는 미들웨어이다. body parser 미들웨어를 사용하면 request 객체에 body 속성이 추가된다. express 4.x 버전 이후 [body-parser 미들웨어](https://github.com/expressjs/body-parser)와 [Multer 미들웨어](https://github.com/expressjs/multer)로 변경 되었으며, 직접 설치해 사용 해야한다.

## body-parser 미들웨어
텍스트 형태의 POST 요청 데이터를 추출할 때 사용한다.
```
var http = require('http');
var express = require('express');
var fs = require('fs');

var app = express();

var cookieParser = require('cookie-parser');
// body-parser 미들웨어 추출
var bodyParser = require('body-parser')

app.use(cookieParser());
// body-parser 미들웨어 설정
app.use(bodyParser());

app.get('/', function (request, response) {
    if(request.cookies.auth) {
        response.send('<h1>Login Success</h1>')
    } else {
        response.redirect('/login');
    }
});
app.get('/login', function (request, response) {
    fs.readFile('login.html', function (error, data) {
        response.send(data.toString());
    });
});
app.post('/login', function (request, response) {
    // 쿠키 생성
    var login = request.param('login');
    var password = request.param('password');
    
    console.log(login, password);
    console.log(request.body);
    
    // 로그인 정보 확인
    if(request.body.login == 'aaron' && request.body.password == '1234') {
        response.cookie('auth', true);
        response.redirect('/');
    } else {
        response.redirect('/login');
    }
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

## Multer 미들웨어
멀티미디어를 업로드 할 때 사용한다. 업로드 설정 등 더 자세한 내용은 [홈페이지](https://github.com/expressjs/multer) 참조.
```
var http = require('http');
var express = require('express');
var fs = require('fs');

var app = express();

var bodyParser = require('body-parser')
app.use(bodyParser());

// multer 미들웨어 추출
var multer = require('multer');
// upload 파일이 저장될 폴더 path 및 파일명 지정
var storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/')
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + '-' + file.originalname)
    } 
});
// multer 모듈 함수에 옵션을 설정후 미들웨어 리턴
//var upload = multer({ dest: 'uploads/' });
var upload = multer({ storage: storage });

app.get('/', function(req, res){
    fs.readFile('fileupload.html', function (error, data) {
        res.send(data.toString()); 
    });
});

// 단일 파일 업로드시
//app.post('/', upload.single('image'), function(req, res) {
// 다중 파일 업로드시
app.post('/', upload.array('image', 4), function(req, res) {
    console.log(req.body);
    console.log(req.files);
//    res.send(req.file);
    res.send(req.files);
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

> NOTE_ UUID  
> 같은 이름으로 파일이 덮어 씌여지는 경우가 있기 때문에 중복없는 아이디를 만드는 UUID(Universally Unique Identifier: RFC 4122 표준)를 활용하거나 데이터베이스에 파일을 저장하는것이 안전하다. [Node.js UUID](https://github.com/broofa/node-uuid)

---

# session 미들웨어 (-> express-session 미들웨어)
쿠키는 정보를 클라이언트의 웹 브라우저에 저장하고 세션은 정보를 서버에 저장하는 기술이다. 일반적으로 세션은 클라이언트에 세션 식별자 쿠키를 부여하고 대응되는 서버에 위치하는 별도 저장소에 데이터를 저장한다. session 미들웨어는 세션을 쉽게 생성할 수 있게 도와주는 미들웨어이다. session 미들웨어를 사용하면 request 객체에 session 속성을 부여한다. express 4.x 버전 이후 [express-session 미들웨어](https://github.com/expressjs/session)을 직접 설치해 사용 해야한다.

```
var http = require('http');
var express = require('express');
var cookieParser = require('cookie-parser');
var session = require('express-session');

var app = express();

app.use(cookieParser());
app.set('trust proxy', 1);
app.use(session({
    secret: 'secret key'
}));
app.use(function (req, res) {
    var output = {};
    output.cookies = req.cookies;
    output.session = req.session;
    
    req.session.now = (new Date()).toUTCString();
    
    res.send(output);
});

http.createServer(app).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

![_config.yml]({{ site.baseurl }}/images/2017-08-07-node-js-8-06.png)

![_config.yml]({{ site.baseurl }}/images/2017-08-07-node-js-8-07.png)

### *session 메서드 옵션*
- name : 쿠키의 name 속성 지정 (default 'connect.sid')
- store : 세션 저장소 지정 (default new MenoryStore instance)
- cookie : 생성할 cookie와 관련된 정보를 지정 (defailt {path: '/', httpOnly: true, secure: false, maxAge: null})

### *request 객체에 있는 session 속성의 메서드*
- regenerate(callback) : 세션 다시 생성
- destroy(callback) : 세션 제거
- reload(callback) : 세션 다시 불러오기
- save(callback) : 세션 저장

> NOTE_ 더 자세한 sesstion 메서드 옵션과 request 객체에 있는 session 속성의 메서드 정보는 [express-session 미들웨어 홈페이지](https://github.com/expressjs/session)에서 확인 가능하다.

---

# RESTful 웹 서비스 개발
RESTful 웹 서비스는 REST(REpresentational State Transfer)규정을 맞춰 만든 웹 서비스를 의미한다. REST 규정은 일관된 웹 서비스 인터페이스 설계를 위한 규정이다.

### RESTful 웹 서비스의 구조

| column | column |  
|--------|--------|  
|        |        |  


| 경로        | /collection                   | collection               |
|------------|-------------------------------|---------------------------|
| GET 방식    | 컬렉션을 조회한다               | 컬렉션의 특정 요소를 조회한다 |
|------------|-------------------------------|---------------------------|
| POST 방식   | 컬렉션에 새로운 데이터를 추가한다  | 사용하지 않는다             |
|------------|-------------------------------|---------------------------|
| PUT 방식    | 컬렉션 전체를 한꺼번에 변경한다   | 컬렉션에 특정 요소를 수정한다 |
|------------|-------------------------------|---------------------------|
| DELETE 방식 | 컬렉션 전체를 삭제한다           | 컬렉션의 특정 요소를 삭제한다 |

