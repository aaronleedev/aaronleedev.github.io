---
layout: post
title:  [node.js] http 모듈 - request 객체
date:   2017-08-04 17:10:00
author: Aaron Lee
categories: node_js
tags:	node.js book study
cover:  "/assets/node_js_book_01.png"
---

# request 객체
클라이언트에서 페이지 요청시, request 이벤트 리스너의 첫번째 매개변수로 request 객체가 넘어온다.
### *request 객체 속성*
- method : 클라이언트의 요청 방식
- url : 클라이언트가 요청한 URL
- headers : 요청 메세지 헤더
- trailers : 요청 메세지 트레일러
- httpVersion : HTTP 프로토콜 버전

## url 속성을 사용한 페이지 구분
```
var http = require('http');
var fs = require('fs');
var url = require('url');

http.createServer(function(request, response) {
    // url 모듈을 사용하여 pathname 을 추출
    var pathname = url.parse(request.url).pathname;
    
    if(pathname == '/') {
        fs.readFile('http.index.html', function (error, data) {
            response.writeHead(200, { 'Content-Type': 'text/html' });
            response.end(data);
        });
    } else if(pathname == '/OtherPage') {
        fs.readFile('http.otherpage.html', function (error, data) {
            response.writeHead(200, { 'Content-Type': 'text/html' });
            response.end(data);
        });
    }
}).listen(52278, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

## method 속성을 사용한 페이지 구분
```
var http = require('http');

http.createServer(function (request, response) {
    // GET / POST 요청 구분
    if(request.method == 'GET') {
        console.log('GET 요청 입니다.');
    } else if(request.method == 'POST') {
        console.log('POST 요청 입니다.');
    }
}).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

## GET 요청 매개변수 추출
```
var http = require('http');
var url = require('url');

http.createServer(function (request, response) {
    // GET 요청 매개변수 추출
    var query = url.parse(request.url, true).query;
    
    response.writeHead(200, { 'Content-Type': 'text/html' });
    response.end('<h1>' + JSON.stringify(query) + '</h1>');
}).listen(52273, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```

## POST 요청 매개변수 추출
POST 방식은 GET 방식보다 데이터를 더 많이 담을 수 있고 보안 측면에서 좋다. request 이벤트가 발생한 후 request 객체의 data 이벤트로 데이터가 전달된다.
```
var http = require('http');
var fs = require('fs');

http.createServer(function (request, response) {
    if(request.method == 'GET') {
        // POST 방식으로 요청하는 페이지 출력
        fs.readFile('http.post.html', function (error, data) {
            response.writeHead(200, { 'Content-Type': 'text/html' });
            response.end(data);
        });
    } else if(request.method == 'POST') {
        // POST 요청 매개변수 추출
        request.on('data', function (data) {
            response.writeHead(200, { 'Content-Type': 'text/html' });
            response.end('<h1>' + data + '</h1>');
        });
    }
}).listen(52273, function () {
     console.log('Server Running at http://127.0.0.1:52273');
});
```

## 쿠키 추출
request 객체의 headers 속성 안 cookie 속성에서 추출할 수 있다.
```
var http = require('http');

http.createServer(function (request, response) {
    // 쿠키 추출 및 분해
    var cookie = request.headers.cookie;
    console.log(cookie);
    cookie = cookie.split(';').map(function (element) {
        var element = element.split('=');
        return {
            key: element[0],
            value: element[1]
        };
    });
    
    // 쿠키 설정
    response.writeHead(200, { 
        'Content-type': 'text/html',
        'Set-Cookie': [
            'breakfast = toast',
            'dinner = chicken'
        ]
    });
    response.end('<h1>' + JSON.stringify(cookie) + '</h1>');
}).listen(52279, function () {
    console.log('Server Running at http://127.0.0.1:52273');
});
```