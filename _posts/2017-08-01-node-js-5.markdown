---
layout: post
title:  node.js 이벤트
date:   2017-08-01 14:12:00
author: Aaron Lee
categories: node_js
tags:	node.js book study
cover:  "/assets/node_js_book_01.png"
---

# 이벤트 연결
### 이벤트 연결 메서드
- on( eventName, eventHandler ) : 이벤트에 이벤트 리스너 연결
- once( eventName, eventHandler ) : 이벤트 리스너를 한번만 연결

```
// process 객체에 exit 이벤트에 이벤트 리스너 연결
process.on('exit', function () {
    console.log('exit event called!');
});

// process 객체에 uncaughtException 이벤트에 이벤트 리스너 연결
process.on('uncaughtException', function (error) {
    console.log('uncaughtException event called!');
});

// 예외 발생
error.error.error();
```

> NOTE_ [Process Events](https://nodejs.org/api/process.html#process_process_events)는 Node.js 문서에서 찾아볼수 있다.

# 이벤트 연결 개수 제한
하나의 이벤트에 10개가 넘는 이벤트 리스너를 연결할 경우 경고가 발생한다.
- setMaxListeners( n ) : 이벤트 리스너의 최대 연결 개수를 설정, 무제한 설정시 n=0

```
// 이벤트 리스너 최대 연결 개수 설정
process.setMaxListeners(15);
```

# 이벤트 제거
### 이벤트 제거 메서드
- removeListener( eventName, handler ) : 특정 이벤트의 이벤트 리스너 제거
- removeAllListeners( [eventName] ) : 모든 이벤트 리스너 제거

```
var onUncaughtException = function (error) {
    console.log('uncaughtException event called!');
}

// process 객체에 uncaughtException 이벤트에 이벤트 리스너 연결
process.on('uncaughtException', onUncaughtException);
// process 객체에 uncaughtException 이벤트에 이벤트 리스너 연결 해제
process.removeListener('uncaughtException', onUncaughtException);

// 예외 발생
error.error.error();
```

# 이벤트 강제 발생
### 이벤트 강제 발생 메서드
- emit( event, [arg1], [arg2], [...] ) : 이벤트 강제 발생

```
process.on('exit', function () {
    console.log('안녕히 계세요 .. !');
});

// 이벤트 강제 발생
process.emit('exit');
process.emit('exit');
process.emit('exit');
process.emit('exit');

console.log('프로그램 실행 중');
```
```
Command: node   "D:/node.js code/example/event.trigger.js" 
안녕히 계세요 .. !
안녕히 계세요 .. !
안녕히 계세요 .. !
안녕히 계세요 .. !
프로그램 실행 
안녕히 계세요 .. !
Program exited with code 0
```

> NOTE_ [process.exit([code])](https://nodejs.org/api/process.html#process_process_exit_code) : 프로그램 강제 종료 메서드 

# 이벤트 생성
이벤트 연결 / 제거 메서드는 EventEmitter 객체의 속성이다.
### EventEmitter 객체 메서드
- addEventListener( eventName, eventHandler ) : 이벤트에 이벤트 리스너를 연결
- on( eventName, eventHandler ) : 이벤트에 이벤트 리스너를 연결
- once( eventName, eventHandler ) : 이벤트 리스너를 한번만 연결
- setMaxListeners( n ) : 이벤트 리스너의 최대 연결 개수를 설정, 무제한 설정시 n=0
- removeListener( eventName, handler ) : 특정 이벤트의 이벤트 리스너 제거
- removeAllListeners( [eventName] ) : 모든 이벤트 리스너 제거

```
// EventEmitter 객체 생성
var custom = new (require('events').EventEmitter)();

// 이벤트 연결
custom.on('tick', function () {
    console.log('이벤트 발생!');
});

// 이벤트 강제 발생
custom.emit('tick');
```
```
Command: node   "D:/node.js code/example/event.create.js" 
이벤트 발생!
Program exited with code 0
```

### 이벤트 생성 부분과 연결 부분 모듈로 분리
```
*****************
* event.rint.js *
*****************

exports.timer = new (require('events').EventEmitter)();

setInterval(function () {
   exports.timer.emit('tick'); 
}, 1000);
```
```
*****************
* event.app.js *
*****************

var rint = require('./rint');

rint.timer.on('tick', function () {
    console.log('이벤트 발생!');
});
```